#! /bin/bash

TITLE="Scheduled-Update-and-Package-Installer-of-Doom"

TIMETOCOMMIT=03
UFLAG=''
IFLAG=''
PFLAG=''
PACKAGES=""
UPDATES=""
NUMPACKAGES=""
NUMUPDATES="0"
PACKAGEMANAGER=""

# Colors
BBG='\e[40m' # black background
RBG='\e[41m' # red background
G='\e[0;32m' # green
CB='\e[1;36m' # cyan bold
GB='\e[1;32m' # green bold
WB='\e[1;37m' # white bold
NC='\e[0m' # no color

identifyPackageManager() {
	if [ -x "$(command -v xbps-install)" ]; then PACKAGEMANAGER="xbps"
	elif [ -x "$(command -v apt-get)" ]; then PACKAGEMANAGER="apt"
	elif [ -x "$(command -v pacman)" ]; then PACKAGEMANAGER="pacman"
	else echo "Could not locate a compatable package manager on this system" && exit 0
	fi
}

install() {
	case $PACKAGEMANAGER in
		"xbps")
			xbps-install -Sfy $PACKAGES ;;
		"pacman")
			pacman -S --noconfirm --disable-download-timeout --noprogressbar $PACKAGES ;;
		"apt")
			apt-get -y install $PACKAGES ;;
	esac
}

dlUpdate() {
	case $PACKAGEMANAGER in
		"xbps")
			xbps-install -SuD ;;
		"pacman")
			pacman -Syw ;;
		"apt")
			apt-get update --download-only ;;
	esac
}

getUpdates() {
	printf "\e[2;2H${BBG}%$(($COLS - 2))s\e[2;2H${GB}${BBG} Refreshing $PACKAGEMANAGER repos... ${G}"
	case $PACKAGEMANAGER in
		"xbps")
			xbps-install -S >> /dev/null && UPDATES=$(xbps-install -Sun | awk '{print $1}') && NUMUPDATES=$(xbps-install -Sun | wc -l) ;;
		"pacman")
			pacman -Sy >> /dev/null && UPDATES=$(pacman -Qu) && NUMUPDATES=$(pacman -Qu | wc -l) ;;
		"apt")
			apt-get update >> /dev/null && UPDATES=$(apt list --upgradable | sed 's/\// /g' | awk '{print $1}' | grep -v "Listing...") && NUMUPDATES=$(echo $UPDATES | wc -w) ;;
	esac
}

checkTime() {
	[ $TIMETOCOMMIT -lt 0 ] && echo "supid: hour provided less than 0" && displayUsage
	[ $TIMETOCOMMIT -gt 23 ] && echo "supid: hour provided greater than 23" && displayUsage
	[ ${#TIMETOCOMMIT} -lt 2 ] && TIMETOCOMMIT="0$TIMETOCOMMIT"
}

commitTransaction() {
	clear
	[ $UFLAG ] && dlUpdate
	[ $IFLAG ] && install
	[ $PFLAG ] && printf "\n\nPowering off..." && sleep 5s && poweroff
	exit 0
}

displayUsage() {
	printf "
usage: autoinst [-h                           show this help message]
                [-i \"packages\"            install specified packages]
                [-u              download and cache updated packages]
                [-p                        poweroff after completion]
                [-s hour       specify the starting hour, default 03]\n"
 exit 0
}

setupTerminal() {
	printf "\e[?25l" #hide cursor
	stty -echo #hide user input
}

resetTerminal() {
	printf "\e[?25h" #unhide cursor
	stty echo #enable user input
}

setupScreen() {
	ROWS=$(tput lines)
	COLS=$(tput cols)
	printf "\e[1;1H${G}╔═[${CB}$TITLE${G}]%$((($COLS-6) - ${#TITLE}))s═╗" " " | sed 's/ /═/g'
	for ((i=0; i<$(($ROWS-2)); i++)); do
		printf "║\e[$(($COLS-1))C║"
	done
	printf "╚%$(($COLS-2))s╝" " " | sed 's/ /═/g'
	[ $PFLAG ] && printf "\e[$ROWS;$(($COLS-11))H\e ${NC}${RBG} POWEROFF "
}

resetScreen() {
	clear
	setupScreen
	[ $UFLAG ] && drawUpdates
	[ $IFLAG ] && drawInstall
}

drawUpdates() {
	printf "\e[2;2H${BBG}%$(($COLS - 2))s\e[1G\e[1C${GB}${BBG} Download updates   ${NC}${BBG}$NUMUPDATES pkgs${G}"
	while IFS= read -r line && [ $NUMUPDATES -gt 0 ]; do
	    printf "\e[1G\e[1C\e[1B ${GB}-${NC} $line${G}"
		done <<< "$UPDATES"
	printf "\e[1G\e[1C\e[2B ${GB}*${NC} Updated packages will be downloaded, you will have to commit the update manually"
}

drawInstall() {
	printf "\e[1G\e[1C\e[2B${BBG}%$(($COLS - 2))s\e[1G\e[1C${GB}${BBG} Package installation   ${NC}${BBG}$NUMPACKAGES pkgs${G}"
	for p in ${PACKAGES[@]}; do
		printf "\e[1G\e[1C\e[1B ${GB}-${NC} $p${G}"
	done
}

drawTime() {
	printf "\e[$ROWS;4H${G}[${CB}Time  ${NC}$(date "+%H:%M:%S")${G}]═[${CB}Continuing  ${NC}$TIMETOCOMMIT:00${G}]"
}

while getopts 'hi:ups:' flag; do
	case "${flag}" in
		h) displayUsage ;;
		i) IFLAG='true' && PACKAGES="${OPTARG}" && NUMPACKAGES=$(echo $PACKAGES | wc -w);;
		u) UFLAG='true' ;;
		p) PFLAG='true' ;;
		s) TIMETOCOMMIT="${OPTARG}" ;;
		*) displayUsage ;;
	esac
done

[ $OPTIND -eq 1 ] && displayUsage && exit 1
[ `whoami` != root ] && echo "Please run this script as root or using sudo" && exit 1

identifyPackageManager
checkTime
clear  
[ $UFLAG ]&& getUpdates
resetScreen

while true; do
	HOUR=$(date "+%H")
	[ ! $(tput cols) -eq $COLS ] && resetScreen
	[ ! $(tput lines) -eq $ROWS ] && resetScreen
	trap 'resetTerminal' EXIT
	drawTime
	[ $HOUR -eq $TIMETOCOMMIT ] && commitTransaction
	sleep 1s
done
