#! /bin/bash

TIMETOCOMMIT=03
UFLAG=''
IFLAG=''
PFLAG=''
PACKAGES=""
UPDATES=""
NUMPACKAGES=""
NUMUPDATES="0"
PACKAGEMANAGER=""

BBG='\033[40m' # black background
RBG='\033[41m' # red background
G='\033[0;32m' # green
CB='\033[1;36m' # cyan bold
GB='\033[1;32m' # green bold
WB='\033[1;37m' # white bold
NC='\033[0m' # no color

identifyPackageManager() {
if [ -x "$(command -v xbps-install)" ]; then PACKAGEMANAGER="xbps"
elif [ -x "$(command -v apt-get)" ]; then PACKAGEMANAGER="apt"
elif [ -x "$(command -v pacman)" ]; then PACKAGEMANAGER="pacman"
else echo "Could not locate a compatable package manager on this system" && exit 0
fi
}

install() {
	case $PACKAGEMANAGER in
		"xbps")
			xbps-install -Sfy $PACKAGES ;;
		"pacman")
			pacman -S --noconfirm --disable-download-timeout --noprogressbar $PACKAGES ;;
		"apt")
			apt-get -y install $PACKAGES ;;
	esac
}

dlUpdate() {
	case $PACKAGEMANAGER in
		"xbps")
			xbps-install -SuD ;;
		"pacman")
			pacman -Syw ;;
		"apt")
			apt-get update --download-only ;;
	esac
}

getUpdates() {
	case $PACKAGEMANAGER in
		"xbps")
			xbps-install -S >> /dev/null && UPDATES=$(xbps-install -Sun | awk '{print $1}') && NUMUPDATES=$(xbps-install -Sun | wc -l) ;;
		"pacman")
			pacman -Sy >> /dev/null && UPDATES=$(pacman -Qu) && NUMUPDATES=$(pacman -Qu | wc -l) ;;
		"apt")
			apt-get update >> /dev/null && UPDATES=$(apt list --upgradable | sed 's/\// /g' | awk '{print $1}' | grep -v "Listing...") && NUMUPDATES=$(echo $UPDATES | wc -w) ;;
	esac
}

checkTime() {
	[ $TIMETOCOMMIT -lt 0 ] && echo "supid: hour provided less than 0" && displayUsage
	[ $TIMETOCOMMIT -gt 23 ] && echo "supid: hour provided greater than 23" && displayUsage
	[ ${#TIMETOCOMMIT} -lt 2 ] && TIMETOCOMMIT="0$TIMETOCOMMIT"
}

commitTransaction() {
	clear
	[ $UFLAG ] && dlUpdate
	[ $IFLAG ] && install
	[ $PFLAG ] && printf "\n\nPowering off..." && sleep 5s && poweroff
	exit 0
}

displayUsage() {
	printf "
usage: autoinst [-h                           show this help message]
                [-i \"packages\"            install specified packages]
                [-u              download and cache updated packages]
                [-p                        poweroff after completion]
                [-s hour       specify the starting hour, default 03]\n"
 exit 0
}

while getopts 'hi:ups:' flag; do
	case "${flag}" in
		h) displayUsage ;;
		i) IFLAG='true' && PACKAGES="${OPTARG}" && NUMPACKAGES=$(echo $PACKAGES | wc -w);;
		u) UFLAG='true' ;;
		p) PFLAG='true' ;;
		s) TIMETOCOMMIT="${OPTARG}" ;;
		*) displayUsage ;;
	esac
done

[ $OPTIND -eq 1 ] && displayUsage && exit 1

[ `whoami` != root ] && echo "Please run this script as root or using sudo" && exit 1

identifyPackageManager
[ $UFLAG ] && echo "Refreshing $PACKAGEMANAGER repos..." && getUpdates
checkTime

while true; do
	HOUR=$(date "+%H")
	clear

printf "${G}╔═[${CB}Scheduled Update and Package Installer of Doom${G}]═╗\n"
printf "║${GB}${BBG} Transaction will contain:                        ${G}║\n"
if [ $UFLAG ]; then
	printf "║${CB} Download updates%$(( 27 - ${#NUMUPDATES} ))s${NC}$NUMUPDATES pkgs ${G}║\n" " "
	while IFS= read -r line && [ $NUMUPDATES -gt 0 ]; do
	    printf "║ ${GB}-${NC} $line%$(( 47 - ${#line} ))s${G}║\n"
		done <<< "$UPDATES"
fi
if [ $IFLAG ]; then
	printf "║${CB} Package installation%$(( 23 - ${#NUMPACKAGES} ))s${NC}$NUMPACKAGES pkgs ${G}║\n" " "
	for p in ${PACKAGES[@]}; do
		printf "║ ${GB}-${NC} $p%$(( 47 - ${#p} ))s${G}║\n" " "
done
fi
if [ $PFLAG ]; then
	printf "${G}╚═[${CB}Time  ${NC}$(date "+%H:%M:%S")${G}]═[${CB}Continuing  ${NC}$TIMETOCOMMIT:00${G}]══${WB}${RBG} POWEROFF ${G}═╝${NC}\n"
else
	printf "${G}╚═[${CB}Time  ${NC}$(date "+%H:%M:%S")${G}]═[${CB}Continuing  ${NC}$TIMETOCOMMIT:00${G}]═════════════╝${NC}\n"
fi

[ $UFLAG ] && printf "\n${GB}*${NC} Updated packages will be downloaded, you will \n  have to commit the update manually"

[ $HOUR -eq $TIMETOCOMMIT ] && commitTransaction
	sleep 1s
done
